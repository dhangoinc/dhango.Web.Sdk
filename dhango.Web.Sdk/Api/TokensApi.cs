/* 
 * Demo Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using dhango.Web.Sdk.Client;
using dhango.Web.Sdk.Model;

namespace dhango.Web.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITokensApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Deletes a saved payment method. This will not any transactions that are already in process with this token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns></returns>
        void TokensIdDelete (string id, string accountKey = null, string culture = null);

        /// <summary>
        /// Deletes a saved payment method. This will not any transactions that are already in process with this token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TokensIdDeleteWithHttpInfo (string id, string accountKey = null, string culture = null);
        /// <summary>
        /// Gets the masked details of a saved payment token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>GetTokenResponse</returns>
        GetTokenResponse TokensIdGet (string id, string accountKey = null, string culture = null);

        /// <summary>
        /// Gets the masked details of a saved payment token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of GetTokenResponse</returns>
        ApiResponse<GetTokenResponse> TokensIdGetWithHttpInfo (string id, string accountKey = null, string culture = null);
        /// <summary>
        /// Saves a payment method as a token for later use.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contains payment information to be stored. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>GetTokenResponse</returns>
        GetTokenResponse TokensPost (PostTokenRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Saves a payment method as a token for later use.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contains payment information to be stored. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of GetTokenResponse</returns>
        ApiResponse<GetTokenResponse> TokensPostWithHttpInfo (PostTokenRequest body = null, string accountKey = null, string culture = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Deletes a saved payment method. This will not any transactions that are already in process with this token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TokensIdDeleteAsync (string id, string accountKey = null, string culture = null);

        /// <summary>
        /// Deletes a saved payment method. This will not any transactions that are already in process with this token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TokensIdDeleteAsyncWithHttpInfo (string id, string accountKey = null, string culture = null);
        /// <summary>
        /// Gets the masked details of a saved payment token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of GetTokenResponse</returns>
        System.Threading.Tasks.Task<GetTokenResponse> TokensIdGetAsync (string id, string accountKey = null, string culture = null);

        /// <summary>
        /// Gets the masked details of a saved payment token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (GetTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTokenResponse>> TokensIdGetAsyncWithHttpInfo (string id, string accountKey = null, string culture = null);
        /// <summary>
        /// Saves a payment method as a token for later use.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contains payment information to be stored. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of GetTokenResponse</returns>
        System.Threading.Tasks.Task<GetTokenResponse> TokensPostAsync (PostTokenRequest body = null, string accountKey = null, string culture = null);

        /// <summary>
        /// Saves a payment method as a token for later use.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contains payment information to be stored. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (GetTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTokenResponse>> TokensPostAsyncWithHttpInfo (PostTokenRequest body = null, string accountKey = null, string culture = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TokensApi : ClientApi, ITokensApi
    {
        private dhango.Web.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokensApi(String basePath, string key, string secret)
            : base(basePath, key, secret)
        {

        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Deletes a saved payment method. This will not any transactions that are already in process with this token. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns></returns>
        public void TokensIdDelete (string id, string accountKey = null, string culture = null)
        {
             TokensIdDeleteWithHttpInfo(id, accountKey, culture);
        }

        /// <summary>
        /// Deletes a saved payment method. This will not any transactions that are already in process with this token. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TokensIdDeleteWithHttpInfo (string id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TokensApi->TokensIdDelete");

            var localVarPath = "/tokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokensIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deletes a saved payment method. This will not any transactions that are already in process with this token. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TokensIdDeleteAsync (string id, string accountKey = null, string culture = null)
        {
             await TokensIdDeleteAsyncWithHttpInfo(id, accountKey, culture);

        }

        /// <summary>
        /// Deletes a saved payment method. This will not any transactions that are already in process with this token. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TokensIdDeleteAsyncWithHttpInfo (string id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TokensApi->TokensIdDelete");

            var localVarPath = "/tokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokensIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Gets the masked details of a saved payment token. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>GetTokenResponse</returns>
        public GetTokenResponse TokensIdGet (string id, string accountKey = null, string culture = null)
        {
             ApiResponse<GetTokenResponse> localVarResponse = TokensIdGetWithHttpInfo(id, accountKey, culture);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the masked details of a saved payment token. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of GetTokenResponse</returns>
        public ApiResponse< GetTokenResponse > TokensIdGetWithHttpInfo (string id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TokensApi->TokensIdGet");

            var localVarPath = "/tokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokensIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenResponse)));
        }

        /// <summary>
        /// Gets the masked details of a saved payment token. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of GetTokenResponse</returns>
        public async System.Threading.Tasks.Task<GetTokenResponse> TokensIdGetAsync (string id, string accountKey = null, string culture = null)
        {
             ApiResponse<GetTokenResponse> localVarResponse = await TokensIdGetAsyncWithHttpInfo(id, accountKey, culture);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the masked details of a saved payment token. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifier of the token.</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (GetTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTokenResponse>> TokensIdGetAsyncWithHttpInfo (string id, string accountKey = null, string culture = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling TokensApi->TokensIdGet");

            var localVarPath = "/tokens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokensIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenResponse)));
        }

        /// <summary>
        /// Saves a payment method as a token for later use. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contains payment information to be stored. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>GetTokenResponse</returns>
        public GetTokenResponse TokensPost (PostTokenRequest body = null, string accountKey = null, string culture = null)
        {
             ApiResponse<GetTokenResponse> localVarResponse = TokensPostWithHttpInfo(body, accountKey, culture);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Saves a payment method as a token for later use. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contains payment information to be stored. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>ApiResponse of GetTokenResponse</returns>
        public ApiResponse< GetTokenResponse > TokensPostWithHttpInfo (PostTokenRequest body = null, string accountKey = null, string culture = null)
        {

            var localVarPath = "/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokensPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenResponse)));
        }

        /// <summary>
        /// Saves a payment method as a token for later use. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contains payment information to be stored. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of GetTokenResponse</returns>
        public async System.Threading.Tasks.Task<GetTokenResponse> TokensPostAsync (PostTokenRequest body = null, string accountKey = null, string culture = null)
        {
             ApiResponse<GetTokenResponse> localVarResponse = await TokensPostAsyncWithHttpInfo(body, accountKey, culture);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Saves a payment method as a token for later use. 
        /// </summary>
        /// <exception cref="dhango.Web.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Contains payment information to be stored. (optional)</param>
        /// <param name="accountKey">Used to make API calls on behalf of another account. (optional)</param>
        /// <param name="culture">The culture to be used when setting the language for error messages. (optional)</param>
        /// <returns>Task of ApiResponse (GetTokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetTokenResponse>> TokensPostAsyncWithHttpInfo (PostTokenRequest body = null, string accountKey = null, string culture = null)
        {

            var localVarPath = "/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountKey != null) localVarHeaderParams.Add("accountKey", this.Configuration.ApiClient.ParameterToString(accountKey)); // header parameter
            if (culture != null) localVarHeaderParams.Add("culture", this.Configuration.ApiClient.ParameterToString(culture)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (basic) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password);
            }

            // make the HTTP request
            var localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokensPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetTokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetTokenResponse)));
        }

    }
}
