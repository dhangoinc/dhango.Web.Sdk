/* 
 * Demo Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = dhango.Web.Sdk.Client.SwaggerDateConverter;
namespace dhango.Web.Sdk.Model
{
    /// <summary>
    /// The model to capture a previously authorized transaction.
    /// </summary>
    [DataContract]
        public partial class PostCaptureRequest :  IEquatable<PostCaptureRequest>, IValidatableObject
    {
        /// <summary>
        /// The amount of the previously authorized transaction that is being captured.
        /// </summary>
        /// <value>The amount of the previously authorized transaction that is being captured.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// The amount the payer is being charged to initiate this transaction. This should only be a non-zero amount when  you are charging the payer a fee (e.g. a convenience fee or surcharge).
        /// </summary>
        /// <value>The amount the payer is being charged to initiate this transaction. This should only be a non-zero amount when  you are charging the payer a fee (e.g. a convenience fee or surcharge).</value>
        [DataMember(Name="payerFee", EmitDefaultValue=false)]
        public double? PayerFee { get; set; }

        /// <summary>
        /// The amount the platform is charging the account for this transaction. If left null, the fee will be calculated   automatically based on the fee settings on the account. This is only used as an override to that calculation.  Only the platform can set this fee.
        /// </summary>
        /// <value>The amount the platform is charging the account for this transaction. If left null, the fee will be calculated   automatically based on the fee settings on the account. This is only used as an override to that calculation.  Only the platform can set this fee.</value>
        [DataMember(Name="platformFee", EmitDefaultValue=false)]
        public double? PlatformFee { get; set; }

        /// <summary>
        /// The amount charged for shipping, if any.
        /// </summary>
        /// <value>The amount charged for shipping, if any.</value>
        [DataMember(Name="shippingAmount", EmitDefaultValue=false)]
        public double? ShippingAmount { get; set; }

        /// <summary>
        /// The amount charged for tax, if any.
        /// </summary>
        /// <value>The amount charged for tax, if any.</value>
        [DataMember(Name="taxAmount", EmitDefaultValue=false)]
        public double? TaxAmount { get; set; }

        /// <summary>
        /// Line items needed for Level 2/3 qualification.
        /// </summary>
        /// <value>Line items needed for Level 2/3 qualification.</value>
        [DataMember(Name="lineItems", EmitDefaultValue=false)]
        public List<TransactionLineItem> LineItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostCaptureRequest {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PayerFee: ").Append(PayerFee).Append("\n");
            sb.Append("  PlatformFee: ").Append(PlatformFee).Append("\n");
            sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostCaptureRequest);
        }

        /// <summary>
        /// Returns true if PostCaptureRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PostCaptureRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostCaptureRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PayerFee == input.PayerFee ||
                    (this.PayerFee != null &&
                    this.PayerFee.Equals(input.PayerFee))
                ) && 
                (
                    this.PlatformFee == input.PlatformFee ||
                    (this.PlatformFee != null &&
                    this.PlatformFee.Equals(input.PlatformFee))
                ) && 
                (
                    this.ShippingAmount == input.ShippingAmount ||
                    (this.ShippingAmount != null &&
                    this.ShippingAmount.Equals(input.ShippingAmount))
                ) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) && 
                (
                    this.LineItems == input.LineItems ||
                    this.LineItems != null &&
                    input.LineItems != null &&
                    this.LineItems.SequenceEqual(input.LineItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PayerFee != null)
                    hashCode = hashCode * 59 + this.PayerFee.GetHashCode();
                if (this.PlatformFee != null)
                    hashCode = hashCode * 59 + this.PlatformFee.GetHashCode();
                if (this.ShippingAmount != null)
                    hashCode = hashCode * 59 + this.ShippingAmount.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.LineItems != null)
                    hashCode = hashCode * 59 + this.LineItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
