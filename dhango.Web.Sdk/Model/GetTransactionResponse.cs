/* 
 * Demo Platform
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = dhango.Web.Sdk.Client.SwaggerDateConverter;

namespace dhango.Web.Sdk.Model
{
    /// <summary>
    /// The details of a transaction. This could represent a payment, refund, chargeback, etc.
    /// </summary>
    [DataContract]
        public partial class GetTransactionResponse :  IEquatable<GetTransactionResponse>, IValidatableObject
    {
        /// <summary>
        /// The unique identifier of the transaction.
        /// </summary>
        /// <value>The unique identifier of the transaction.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The name of the payer. This is not necessarily the same name as the card or bank account holder name.
        /// </summary>
        /// <value>The name of the payer. This is not necessarily the same name as the card or bank account holder name.</value>
        [DataMember(Name="payer", EmitDefaultValue=false)]
        public string Payer { get; set; }

        /// <summary>
        /// The user Id from the application that represents the user tied to this transaction.
        /// </summary>
        /// <value>The user Id from the application that represents the user tied to this transaction.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        /// <value>The email address of the user.</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public Card Card { get; set; }

        /// <summary>
        /// Gets or Sets Ach
        /// </summary>
        [DataMember(Name="ach", EmitDefaultValue=false)]
        public Ach Ach { get; set; }

        /// <summary>
        /// A  &lt;string, string&gt;  dictionary of any application-specific metadata to have stored with the payment record.
        /// </summary>
        /// <value>A  &lt;string, string&gt;  dictionary of any application-specific metadata to have stored with the payment record.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public Address BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets ShippingAddress
        /// </summary>
        [DataMember(Name="shippingAddress", EmitDefaultValue=false)]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// The total amount of the transaction. This is inclusive all fees, if any. This will be a negative amount in the  case of refunds, ACH returns, chargebacks, etc.
        /// </summary>
        /// <value>The total amount of the transaction. This is inclusive all fees, if any. This will be a negative amount in the  case of refunds, ACH returns, chargebacks, etc.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// The amount the payer was charged to initiate this transaction, if any. This would be a non-zero amount when  the payer is charged a fee (e.g. a convenience fee or surcharge).
        /// </summary>
        /// <value>The amount the payer was charged to initiate this transaction, if any. This would be a non-zero amount when  the payer is charged a fee (e.g. a convenience fee or surcharge).</value>
        [DataMember(Name="payerFee", EmitDefaultValue=false)]
        public double? PayerFee { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Additional comments tied to the transaction.
        /// </summary>
        /// <value>Additional comments tied to the transaction.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The translated error message, if any.
        /// </summary>
        /// <value>The translated error message, if any.</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or Sets TransactionEventType
        /// </summary>
        [DataMember(Name="transactionEventType", EmitDefaultValue=false)]
        public TransactionEventType TransactionEventType { get; set; }

        /// <summary>
        /// Points back to the original transaction. For example, if this is a refund, the original transaction Id would  be a reference to the original payment record.
        /// </summary>
        /// <value>Points back to the original transaction. For example, if this is a refund, the original transaction Id would  be a reference to the original payment record.</value>
        [DataMember(Name="originalTransactionId", EmitDefaultValue=false)]
        public long? OriginalTransactionId { get; set; }

        /// <summary>
        /// The identifier for the transaction at the underlying processor.
        /// </summary>
        /// <value>The identifier for the transaction at the underlying processor.</value>
        [DataMember(Name = "processorTransactionId", EmitDefaultValue = false)]
        public string? ProcessorTransactionId { get; set; }

        /// <summary>
        /// The list of events that occurred on this transaction.
        /// </summary>
        /// <value>The list of events that occurred on this transaction.</value>
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<TransactionEvent> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTransactionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Payer: ").Append(Payer).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  Ach: ").Append(Ach).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  ShippingAddress: ").Append(ShippingAddress).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PayerFee: ").Append(PayerFee).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  TransactionEventType: ").Append(TransactionEventType).Append("\n");
            sb.Append("  OriginalTransactionId: ").Append(OriginalTransactionId).Append("\n");
            sb.Append("  ProcessorTransactionId: ").Append(ProcessorTransactionId).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetTransactionResponse);
        }

        /// <summary>
        /// Returns true if GetTransactionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetTransactionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTransactionResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Payer == input.Payer ||
                    (this.Payer != null &&
                    this.Payer.Equals(input.Payer))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.Card == input.Card ||
                    (this.Card != null &&
                    this.Card.Equals(input.Card))
                ) && 
                (
                    this.Ach == input.Ach ||
                    (this.Ach != null &&
                    this.Ach.Equals(input.Ach))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.ShippingAddress == input.ShippingAddress ||
                    (this.ShippingAddress != null &&
                    this.ShippingAddress.Equals(input.ShippingAddress))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PayerFee == input.PayerFee ||
                    (this.PayerFee != null &&
                    this.PayerFee.Equals(input.PayerFee))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.TransactionEventType == input.TransactionEventType ||
                    (this.TransactionEventType != null &&
                    this.TransactionEventType.Equals(input.TransactionEventType))
                ) &&
                (
                    this.OriginalTransactionId == input.OriginalTransactionId ||
                    (this.OriginalTransactionId != null &&
                    this.OriginalTransactionId.Equals(input.OriginalTransactionId))
                ) &&
                (
                    this.ProcessorTransactionId == input.ProcessorTransactionId ||
                    (this.ProcessorTransactionId != null &&
                    this.ProcessorTransactionId.Equals(input.ProcessorTransactionId))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Payer != null)
                    hashCode = hashCode * 59 + this.Payer.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.Card != null)
                    hashCode = hashCode * 59 + this.Card.GetHashCode();
                if (this.Ach != null)
                    hashCode = hashCode * 59 + this.Ach.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.ShippingAddress != null)
                    hashCode = hashCode * 59 + this.ShippingAddress.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PayerFee != null)
                    hashCode = hashCode * 59 + this.PayerFee.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                if (this.TransactionEventType != null)
                    hashCode = hashCode * 59 + this.TransactionEventType.GetHashCode();
                if (this.OriginalTransactionId != null)
                    hashCode = hashCode * 59 + this.OriginalTransactionId.GetHashCode();
                if (this.ProcessorTransactionId != null)
                    hashCode = hashCode * 59 + this.ProcessorTransactionId.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
